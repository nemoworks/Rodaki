################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

version: "2.1"
services:
  jobmanager:
    image: apache/flink:1.13.1-scala_2.12-java8
    command: "jobmanager.sh start-foreground"
    ports:
      - 8081:8081
    volumes:
      - ./flink-conf:/opt/flink/conf
      - ./flink-checkpoint:/tmp/flink-checkpoints-directory
      - ./flink-savepoint:/tmp/flink-savepoints-directory
      - ./flink-datasource:/datasource
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    networks:
      - share_net
  taskmanager:
    image: apache/flink:1.13.1-scala_2.12-java8
    depends_on:
      - jobmanager
    command: "taskmanager.sh start-foreground"
    volumes:
      - ./flink-conf:/opt/flink/conf
      - ./flink-checkpoint:/tmp/flink-checkpoints-directory
      - ./flink-savepoint:/tmp/flink-savepoints-directory
      - ./flink-datasource:/datasource
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    networks:
      - share_net
  # zookeeper:
  #   image: wurstmeister/zookeeper
  #   volumes:
  #     - ./zookeeper-data:/opt/zookeeper-3.4.13/data
  #   networks:
  #     - share_net
  # kafka:
  #   image: wurstmeister/kafka:2.13-2.7.0
  #   environment:
  #     # KAFKA_ADVERTISED_LISTENERS: OUTSIDE://localhost:9094
  #     # KAFKA_LISTENERS: OUTSIDE://kafka:9094
  #     # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: OUTSIDE:PLAINTEXT
  #     # KAFKA_INTER_BROKER_LISTENER_NAME: OUTSIDE
  #     # KAFKA_CREATE_TOPICS: "input:2:1, output:2:1"
  #     # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9096
  #     KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
  #     KAFKA_CREATE_TOPICS: "zcinput:1:1"
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LOG_DIRS: "/kafka"
  #     KAFKA_LOG_RETENTION_HOURS: 720
  #   ports:
  #     - 9096:9094
  #   volumes:
  #     - ./kafka-data:/kafka
  #   networks:
  #     - share_net
  rabbitmq:
    image: rabbitmq:3.8.20-management
    hostname: myRabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      TZ: Asia/Shanghai
      hostname: myRabbitmq
    volumes:
      - ./rabbitmq-data:/var/lib/rabbitmq
      - ./rabbitmq_conf/rabbitmq_plugins:/etc/rabbitmq/enabled_plugins
      - ./rabbitmq_conf/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    ports:
      - 15672:15672
      - 5672:5672
    networks:      
      share_net:
        aliases:
          - rabbitmq
      # - share_net

  # iotdb:
  #   image: apache/iotdb:0.12.1-node
  #   networks:
  #     - share_net
  #   volumes:
  #     - ./iotdb/data:/iotdb/data
  #     - ./iotdb/logs:/iotdb/logs 
  #   ports:
  #     - 6667:6667
  #     - 8182:8181
  # elasticsearch:
  #   image: elasticsearch:7.8.1
  #   networks:
  #     - share_net
  #   ports:
  #     - 9200:9200
  #   environment:
  #     - discovery.type=single-node
  #   volumes:
  #     - ./es-data:/usr/share/elasticsearch/data
  # kibana:
  #   image: kibana:7.8.1
  #   networks:
  #     - share_net
  #   ports:
  #     - 5601:5601
  # mongo:
  #   image: mongo:5.0.2
  #   restart: always
  #   volumes:
  #     - ./mongo-db:/data/db
  #   ports:
  #     - 27017:27017
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: 123456
  # #mongo db的管理界面
  # mongo-express: 
  #   image: mongo-express:0.54
  #   restart: always
  #   depends_on:
  #     - mongo
  #   ports:
  #     - 8082:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: 123456
  #     ME_CONFIG_MONGODB_URL: mongodb://root:123456@mongo:27017/


#################### ditto services #########################################

  # mongodb:
  #   image: docker.io/mongo:4.2
  #   networks:
  #     default:
  #       aliases:
  #         - mongodb
  #   command: mongod --storageEngine wiredTiger --noscripting 
  #   volumes:
  #     - ./ditto_mongo_data:/data/db
  #   user: mongodb
  #   ports:
  #     - 27017:27017
  #   environment:
  #      TZ: Asia/Shanghai

  # policies:
  #   image: docker.io/eclipse/ditto-policies:${DITTO_VERSION:-latest}
  #   #mem_limit: 512m
  #   networks:
  #     default:
  #       aliases:
  #         - ditto-cluster
  #   restart: "always"
  #   environment:
  #     - TZ=Asia/Shanghai
  #     - INSTANCE_INDEX=1
  #     - BIND_HOSTNAME=0.0.0.0
  #     - OPENJ9_JAVA_OPTIONS=-XX:+ExitOnOutOfMemoryError -Xtune:virtualized -Xss512k -XX:MaxRAMPercentage=80 -Dakka.coordinated-shutdown.exit-jvm=on -Dakka.cluster.shutdown-after-unsuccessful-join-seed-nodes=120s
  #     - MONGO_DB_HOSTNAME=mongodb
  #     # in order to write logs into a file you can enable this by setting the following env variable
  #     # the log file(s) can be found in /var/log/ditto directory on the host machine
  #     # - DITTO_LOGGING_FILE_APPENDER=true
  #   # Set additional configuration options here
  #   # -Dditto.policies...
  #   command: java -jar starter.jar
  #   # only needed if DITTO_LOGGING_FILE_APPENDER is set
  #   # volumes:
  #   #  - ditto_log_files:/var/log/ditto


  # things:
  #   image: docker.io/eclipse/ditto-things:${DITTO_VERSION:-latest}
  #   # mem_limit: 4096m
  #   networks:
  #     default:
  #       aliases:
  #         - ditto-cluster
  #   restart: "always"
  #   depends_on:
  #     - policies
  #   environment:
  #     - TZ=Asia/Shanghai
  #     - INSTANCE_INDEX=1
  #     - BIND_HOSTNAME=0.0.0.0
  #     - OPENJ9_JAVA_OPTIONS=-XX:+ExitOnOutOfMemoryError -Xtune:virtualized -Xss512k -XX:MaxRAMPercentage=80 -Dakka.coordinated-shutdown.exit-jvm=on -Dakka.cluster.shutdown-after-unsuccessful-join-seed-nodes=120s
  #     - MONGO_DB_HOSTNAME=mongodb
  #     # in order to write logs into a file you can enable this by setting the following env variable
  #     # the log file(s) can be found in /var/log/ditto directory on the host machine
  #     # - DITTO_LOGGING_FILE_APPENDER=true
  #   # Set additional configuration options here
  #   # -Dditto.things...
  #   command: java -jar starter.jar
  #   # only needed if DITTO_LOGGING_FILE_APPENDER is set
  #   # volumes:
  #   #  - ditto_log_files:/var/log/ditto

  # things-search:
  #   image: docker.io/eclipse/ditto-things-search:${DITTO_VERSION:-latest}
  #   #mem_limit: 512m
  #   networks:
  #     default:
  #       aliases:
  #         - ditto-cluster
  #   restart: "always"
  #   depends_on:
  #     - policies
  #   environment:
  #     - TZ=Asia/Shanghai
  #     - INSTANCE_INDEX=1
  #     - BIND_HOSTNAME=0.0.0.0
  #     - OPENJ9_JAVA_OPTIONS=-XX:+ExitOnOutOfMemoryError -Xtune:virtualized -Xss512k -XX:MaxRAMPercentage=80 -Dakka.coordinated-shutdown.exit-jvm=on -Dakka.cluster.shutdown-after-unsuccessful-join-seed-nodes=120s
  #     - MONGO_DB_HOSTNAME=mongodb
  #     # in order to write logs into a file you can enable this by setting the following env variable
  #     # the log file(s) can be found in /var/log/ditto directory on the host machine
  #     # - DITTO_LOGGING_FILE_APPENDER=true
  #   # Set additional configuration options here
  #   # -Dditto.things-search...
  #   command: java -jar starter.jar
  #   # only needed if DITTO_LOGGING_FILE_APPENDER is set
  #   # volumes:
  #   #  - ditto_log_files:/var/log/ditto

  # concierge:
  #   image: docker.io/eclipse/ditto-concierge:${DITTO_VERSION:-latest}
  #   #mem_limit: 512m
  #   networks:
  #     default:
  #       aliases:
  #         - ditto-cluster
  #   restart: "always"
  #   depends_on:
  #     - policies
  #   environment:
  #     - TZ=Asia/Shanghai
  #     - INSTANCE_INDEX=1
  #     - BIND_HOSTNAME=0.0.0.0
  #     - OPENJ9_JAVA_OPTIONS=-XX:+ExitOnOutOfMemoryError -Xtune:virtualized -Xss512k -XX:MaxRAMPercentage=80 -Dakka.coordinated-shutdown.exit-jvm=on -Dakka.cluster.shutdown-after-unsuccessful-join-seed-nodes=120s
  #     - MONGO_DB_HOSTNAME=mongodb
  #     # in order to write logs into a file you can enable this by setting the following env variable
  #     # the log file(s) can be found in /var/log/ditto directory on the host machine
  #     # - DITTO_LOGGING_FILE_APPENDER=true
  #   # Set additional configuration options here
  #   # -Dditto.concierge...
  #   command: java -jar starter.jar
  #   # only needed if DITTO_LOGGING_FILE_APPENDER is set
  #   # volumes:
  #   #  - ditto_log_files:/var/log/ditto

  # connectivity:
  #   image: docker.io/eclipse/ditto-connectivity:${DITTO_VERSION:-latest}
  #   #mem_limit: 1024m
  #   networks:
  #     default:
  #       aliases:
  #         - ditto-cluster
  #     share_net:
  #       aliases:
  #         - ditto-connectivity
  #   restart: "always"
  #   depends_on:
  #     - policies
  #     - concierge
  #   environment:
  #     - TZ=Asia/Shanghai
  #     - INSTANCE_INDEX=1
  #     - BIND_HOSTNAME=0.0.0.0
  #     - OPENJ9_JAVA_OPTIONS=-XX:+ExitOnOutOfMemoryError -Xtune:virtualized -Xmx8192m  -Xss512k -XX:MaxRAMPercentage=80 -Dakka.coordinated-shutdown.exit-jvm=on -Dakka.cluster.shutdown-after-unsuccessful-join-seed-nodes=120s
  #     - MONGO_DB_HOSTNAME=mongodb
  #     # in order to write logs into a file you can enable this by setting the following env variable
  #     # the log file(s) can be found in /var/log/ditto directory on the host machine
  #     # - DITTO_LOGGING_FILE_APPENDER=true
  #   # Set additional configuration options here
  #   # -Dditto.connectivity...
  #   command: java -jar starter.jar
  #   # only needed if DITTO_LOGGING_FILE_APPENDER is set
  #   #volumes:
  #   #  - ditto_log_files:/var/log/ditto

  # gateway:
  #   image: docker.io/eclipse/ditto-gateway:${DITTO_VERSION:-latest}
  #   mem_limit: 512m
  #   networks:
  #     default:
  #       aliases:
  #         - ditto-cluster
  #   restart: "always"
  #   depends_on:
  #     - policies
  #     - concierge
  #   ports:
  #     - "8082:8080"
  #   environment:
  #     - TZ=Asia/Shanghai
  #     - INSTANCE_INDEX=1
  #     - BIND_HOSTNAME=0.0.0.0
  #     - ENABLE_PRE_AUTHENTICATION=true
  #     - OPENJ9_JAVA_OPTIONS=-XX:+ExitOnOutOfMemoryError -Xtune:virtualized -Xss512k -XX:MaxRAMPercentage=80 -Dakka.coordinated-shutdown.exit-jvm=on -Dakka.cluster.shutdown-after-unsuccessful-join-seed-nodes=120s
  #     # in order to write logs into a file you can enable this by setting the following env variable
  #     # the log file(s) can be found in /var/log/ditto directory on the host machine
  #     # - DITTO_LOGGING_FILE_APPENDER=true
  #     # You may use the environment for setting the devops password
  #     #- DEVOPS_PASSWORD=foobar
  #   # Set additional configuration options here
  #   # -Dditto.gateway...
  #   # Setting the devops password via java VM environment
  #   command: java -Dditto.gateway.authentication.devops.password=foobar -jar starter.jar
  #   # only needed if DITTO_LOGGING_FILE_APPENDER is set
  #   # volumes:
  #   #  - ditto_log_files:/var/log/ditto

  # swagger-ui:
  #   image: docker.io/swaggerapi/swagger-ui:v3.38.0
  #   volumes:
  #      - ./ditto_conf/documentation/src/main/resources/openapi:/usr/share/nginx/html/openapi:ro
  #      - ./ditto_conf/documentation/src/main/resources/images:/usr/share/nginx/html/images:ro
  #      - ./ditto_conf/swagger3-index.html:/usr/share/nginx/html/index.html:ro
  #   command: nginx -g 'daemon off;'
  #   restart: "always"

  # nginx:
  #   image: docker.io/nginx:1.20-alpine
  #   volumes:
  #      - ./ditto_conf/nginx.conf:/etc/nginx/nginx.conf:ro
  #      - ./ditto_conf/nginx.htpasswd:/etc/nginx/nginx.htpasswd:ro
  #      - ./ditto_conf/nginx-cors.conf:/etc/nginx/nginx-cors.conf:ro
  #      - ./ditto_conf/index.html:/etc/nginx/html/index.html:ro
  #      - ./ditto_conf/documentation/src/main/resources/images:/etc/nginx/html/images:ro
  #   ports:
  #     - "${DITTO_EXTERNAL_PORT:-8080}:80"
  #   restart: "always"
  #   depends_on:
  #     - gateway
  #     - swagger-ui






  mymongodb:
    image: mongo:5.0.3
    restart: always
    container_name: mymongodb
    networks:
      default:
        aliases:
          - mymongodb
    ports:
      - 27017:27017
    environment:
      TZ: Asia/Shanghai
    volumes:
      # - /zhitai/rodaki_data/mongodb_data:/data/db
      - ./rodaki_data/mongodb_data:/data/db
    environment:
       TZ: Asia/Shanghai
    command: mongod --replSet testSet --wiredTigerCacheSizeGB 10




  mongo-express:
    image: mongo-express:0.54 
    networks:
      default:
        aliases:
          - express
    restart: always
    ports:
      - 8088:8081
    environment:
      # ME_CONFIG_MONGODB_URL: mongodb://mymongodb:27017?replicaSet=testSet
      ME_CONFIG_MONGODB_SERVER : mymongodb
  


  consumer:
    image: consumer:v1
    depends_on:
      - mymongodb
      - rabbitmq
    networks:
      default:
        aliases:
          - consumer
      share_net:
        aliases:
          - consumer
    command: java -Xms10g -Xmx10g -XX:NewRatio=2 -jar consumer.jar TestEntityModel TestDigitalModel 



  service:
    image: service:v1
    depends_on:
      - mymongodb
      - rabbitmq
    networks:
      default:
        aliases:
          - consumer
      share_net:
        aliases:
          - consumer
    command: java -Xms10g -Xmx10g -XX:NewRatio=2 -jar service.jar 1635699600000 3600000 60000


  vehicletypechecker:
    image: vehicletypechecker:v1
    depends_on:
      - mymongodb
      - rabbitmq
    networks:
      default:
        aliases:
          - vehicletypechecker
      share_net:
        aliases:
          - vehicletypechecker
    command: java -Xms10g -Xmx10g -XX:NewRatio=2 -jar vehicletypechecker.jar


networks:
  share_net:
    external:
      name: zc_net
